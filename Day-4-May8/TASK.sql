USE master;

-- 1) List all orders with the customer name and the employee who handled the order.

SELECT contactname CustomerName, CONCAT(firstname, ' ', lastname) EmployeeName, orderID
FROM customers c 
JOIN orders o 
	ON c.CustomerID = o.CustomerID
JOIN Employees e
	ON o.EmployeeID = e.EmployeeID
ORDER BY 1;

-- 2) Get a list of products along with their category and supplier name.

SELECT categoryName, ProductName, CompanyName Supplier 
FROM Categories c 
JOIN Products p
	ON c.CategoryID = p.CategoryID
JOIN Suppliers s
	ON p.SupplierID = s.SupplierID
ORDER BY 1, 2;

-- 3) Show all orders and the products included in each order with quantity and unit price.

SELECT ProductName,  o.orderID 'Order ID', orderdate, od.unitprice 'Unit Price', quantity 
FROM orders o 
JOIN [Order Details] od
	ON o.OrderID = od.OrderID
JOIN Products p
	ON od.ProductID = p.ProductID
ORDER BY 1;

-- 4) List employees who report to other employees (manager-subordinate relationship)

SELECT CONCAT(rp.firstname, ' ', rp.lastname) EmployeeName 
FROM Employees rp
JOIN Employees e
	ON rp.ReportsTo = e.EmployeeID
ORDER BY 1;

-- 5) Display each customer and their total order count.

SELECT c.ContactName 'Customer Name', Count(o.OrderID) Total_Orders
FROM customers c
JOIN orders o
	ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName
ORDER BY 1;


-- 6) Find the average unit price of products per category.

SELECT categoryName, AVG(unitPrice) as 'Average Unit Price'
FROM Categories c
JOIN Products p
	ON c.CategoryID = p.CategoryID
GROUP BY c.CategoryName
ORDER BY 2 DESC;

-- 7) List customers where the contact title starts with 'Owner'.

SELECT contactName CustomerName, ContactTitle  FROM customers
WHERE contactTitle LIKE 'Owner%'

-- 8) Show the top 5 most expensive products.

SELECT TOP 5 productName, unitprice
FROM products 
ORDER BY 2 DESC;

-- 9) Return the total sales amount (quantity × unit price) per order.

SELECT orderid, SUM(Quantity * unitprice)
AS Total_Amount
FROM [Order Details]
GROUP BY orderid;

-- WITH Discount
SELECT orderid, SUM(ROUND(Quantity * (UnitPrice - (UnitPrice * Discount)), 2))
AS Total_Amount
FROM [Order Details]
GROUP BY orderid;

-- 10) Create a stored procedure that returns all orders for a given customer ID.

CREATE PROC proc_get_OrdersById(@pcustomerID NVARCHAR(5))
AS
BEGIN
	SELECT c.customerid, contactname, o.orderid, orderdate
	FROM customers c
	JOIN orders o
		ON o.CustomerID = c.CustomerID
	WHERE c.CustomerID = @pcustomerID
END

proc_get_OrdersById 'ALFKI'

proc_get_OrdersById 'BERGS'

select * from customers

-- 11) Write a stored procedure that inserts a new product.

select * from products

CREATE OR ALTER PROC proc_InsertProduct(
	@pname NVARCHAR(40), 
	@pSupID INT, 
	@pcatID INT, 
	@QpUnit NVARCHAR(20), 
	@punitPrice FLOAT, 
	@unitInStock INT, 
	@unitOnOrders INT, 
	@reorder INT, 
	@dis INT)
AS
BEGIN
	BEGIN TRY
	INSERT INTO products( 
	ProductName, 
	SupplierID, 
	CategoryID, 
	QuantityPerUnit, 
	UnitPrice, 
	UnitsInStock,
	UnitsOnOrder,
	ReorderLevel,
	Discontinued)
	VALUES( @pname, @pSupID, @pcatID, @QpUnit,@punitPrice , @unitInStock , @unitOnOrders, @reorder , @dis)

	PRINT 'inserted '
	END TRY
	BEGIN CATCH
		PRINT Error_Message()
	END CATCH
END


proc_InsertProduct  'Product A', 12, 2, '2 Boxes', 12.00, 12, 0, 4, 0


-- 12) Create a stored procedure that returns total sales per employee.

-- Total revenue generated by each employee
CREATE PROC proc_getTotal_Amount
AS
BEGIN
	SELECT e.employeeid, CONCAT(firstname, ' ', lastname) EmployeeName,
	SUM(od.unitprice * od.quantity) TotalSales
	FROM employees e 
	JOIN orders o
		ON e.EmployeeID = o.EmployeeID
	JOIN [Order Details] od
		ON o.OrderID = od.OrderID
	WHERE e.EmployeeID = 2
	GROUP BY e.EmployeeID, e.FirstName, e.LastName
	ORDER BY 3 DESC
END

proc_getTotal_Amount

-- Get By Each Employee w/ Out Paramter
CREATE OR ALTER PROC proc_get_AmountByEmployee(@pid INT, @totalSales FLOAT OUT)
AS
BEGIN
	SET @totalSales = (SELECT SUM(od.unitprice * od.quantity) TotalSales
	FROM employees e 
	JOIN orders o
		ON e.EmployeeID = o.EmployeeID
	JOIN [Order Details] od
		ON o.OrderID = od.OrderID
	WHERE e.EmployeeID = @pid
	GROUP BY e.EmployeeID)
END

DECLARE @total_sales FLOAT, @id INT = 5			-- Enter Employee ID here to get Formatted Output
EXEC proc_get_AmountByEmployee @id, @total_sales OUT
PRINT 'Total Sales By Employee: '+ try_cast(@id as char(1)) + ' is ' + try_cast(@total_sales as varchar(30))

-- 13) Use a CTE to rank products by unit price within each category.

WITH cte_ProductRanks AS
	(SELECT productname, categoryName, UnitPrice, DENSE_RANK() OVER( PARTITION BY categoryName ORDER BY unitprice DESC) AS 'RANK'
	FROM products p
	JOIN Categories c
		ON P.CategoryID = C.CategoryID)

SELECT * FROM cte_ProductRanks WHERE CategoryName = 'Beverages'

-- SP TO HANDLE GET BY CATEGORY

CREATE PROC proc_getRanks(@pcategory NVARCHAR(40))
AS 
BEGIN
	WITH cte_ProductRanks AS
		(SELECT productname, categoryName, UnitPrice, DENSE_RANK() OVER( PARTITION BY categoryName ORDER BY unitprice DESC) AS 'RANK'
		FROM products p
		JOIN Categories c
			ON P.CategoryID = C.CategoryID)

	SELECT * FROM cte_ProductRanks WHERE CategoryName = @pcategory
END

proc_getRanks 'Condiments'		-- GET RANKS BY CATEGORY


-- 14) Create a CTE to calculate total revenue per product and filter products with revenue > 10,000.

WITH cte_totalRevenue
AS
	(SELECT productName, SUM(ROUND(Quantity * (od.UnitPrice - (od.UnitPrice * Discount)), 2)) TotalRevenue
	FROM products p
	JOIN [Order Details] od
		ON p.ProductID = od.ProductID
	GROUP BY ProductName)

SELECT * FROM cte_totalRevenue WHERE TotalRevenue > 10000
ORDER BY TotalRevenue DESC

-- 15) Use a CTE with recursion to display employee hierarchy.

WITH rcte_EmployeeHierarchy
AS (
	SELECT employeeid, CONCAT(firstname, ' ', lastname) EmployeeName, try_cast('No Manager' AS NVARCHAR(40)) Manager, 0 Level  -- Anchor - Top Level Employee
	FROM employees
	WHERE ReportsTo IS NULL

	UNION ALL

	SELECT e.employeeid, CONCAT(e.firstname, ' ', e.lastname) EmployeeName, try_cast(m.EmployeeName AS NVARCHAR(40)) Manager, m.level + 1 
	FROM Employees e
	JOIN rcte_EmployeeHierarchy m
		ON e.ReportsTo = m.EmployeeID
)

SELECT * FROM rcte_EmployeeHierarchy
